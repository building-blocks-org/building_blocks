[tool.poetry]
name = "building-blocks"
version = "0.1.0"
description = "A clean architecture Python library following hexagonal principles"
authors = ["Glauber Brennon <glauberbrennon@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "building_blocks", from = "src"}]
keywords = [
    "clean architecture",
    "hexagonal architecture",
    "python library",
    "framework agnostic",
    "domain-driven design",
    "ddd",
    "software architecture",
    "software design",
    "software engineering",
    "framework-agnostic",
]

[tool.poetry.dependencies]
python = "^3.9"

[tool.poetry.group.dev.dependencies]
black = "*"
mypy = "*"
bandit = "*"
pre-commit = "*"
pytest = "*"
pytest-asyncio = "^1.0.0"
pytest-cov = "*"
ruff = "*"
typer = "^0.9.0"    # For CLI examples
rich = "^13.0.0"    # For beautiful output

# === SHARED TOOLING CONFIGURATION ===
# Examples inherit these configurations


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Unified Code Style Configuration
[tool.black]
line-length = 88
target-version = ['py39']

[tool.ruff]
line-length = 88
target-version = "py39"
src = ["src", "tests", "examples"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort (import sorting)
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
# Ruff will handle import sorting, so no need for isort section.

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
mypy_path = "src:examples"

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true
disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = [
    "tests",
    "examples/*/tests",
    "docs",
    ".github",
    "scripts",
    ".venv",
    "venv",
    ".virtualenv"
]
skips = ["B101"]

# More granular approach - only skip B101 for test files
[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/**/*.py"]

[tool.pytest.ini_options]
testpaths = ["tests", "examples"]
python_files = ["test_*.py"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=building_blocks",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-append",
    "-v"
]

[tool.coverage.run]
branch = true
parallel = true
source = [
    "src/building_blocks",
    "examples/taskflow_primitives/src/taskflow_primitives"
]
omit = [
    "**/ports/**",
    "**/__init__.py"
]

[tool.coverage.paths]
# This helps coverage understand that the same code might be in different locations
building_blocks = [
    "src/building_blocks",
    "*/building_blocks"
]
taskflow_primitives = [
    "examples/taskflow_primitives/src/taskflow_primitives",
    "*/taskflow_primitives"
]

[tool.coverage.report]
show_missing = true
skip_covered = false
precision = 2
omit = [
    "**/ports/**",
    "**/__init__.py"
]
